#!/bin/bash
set -e
shopt -s globstar

# shellcheck disable=SC2155
export bold=$(tput bold)
# shellcheck disable=SC2155
export normal=$(tput sgr0)
# shellcheck disable=SC2155
export red=$(tput setaf 1)

case "${1}" in
	generate)
		if ! source ./manifest; then
			echo -e "${red}Failed to read manifest${normal}"
			exit 1
		fi
		if test -f bpm.lock; then
			echo "Removing stale bpm.lock"
			rm -f bpm.lock
		fi
		for i in "${dependencies[@]}"; do
			echo "Adding: $i"
			echo "$(cut -d@ -f1 <<< $i)@$(git ls-remote https://github.com/$(cut -d@ -f1 <<<$i).git | awk '{print $1;}' | head -n 1)" >> bpm.lock
		done
		exit
	;;
	update)
		if ! source ./manifest; then
			echo -e "${red}Failed to read manifest${normal}"
			exit 1
		fi
		if [[ ${#dependencies[@]} -eq 0 ]]; then
			echo "${red}Empty dependencies list${normal}"
			exit 1
		fi
		for i in "${dependencies[@]}"; do
			local_version="$(cut -d@ -f2 <<< $i)"
			latest_tag="$(git ls-remote --tags https://github.com/$(cut -d@ -f1 <<< $i) | awk '{ print $2 }' | cut -d"/" -f3 | sort | tail -n 1)"
			# check if major update is possible
			case "${local_version:0:1}" in
				^)
					if ! semver diff "$local_version" "$latest_tag" | grep -q 'major'; then
						upgrading+=("$(cut -d@ -f1 <<< $i)@$latest_tag")
						echo "==> $(cut -d@ -f1 <<< $i)@$local_version -> $(cut -d@ -f1 <<< $i)@$latest_tag"
					else
						checks+=("$(cut -d@ -f1 <<< $i)@$latest_tag")
				;;
				*)
					echo "Version locked: ${local_version#?}"
				;;
			esac
		done
		if [[ "${#checks[@]}" -ne 0 ]]; then
			echo -e "\n${red}These packages will need to be manually checked for breaking behavior before upgrading${normal}"
			echo -e "\t${check[*]}\n"
		fi
		echo -e "\nReplace your manifest with this and then run '${bold}bpm generate${normal}', followed by '${bold}bpm pull${normal}'"
		echo -e "\ndependencies=("
		for i in "${upgrading[@]}"; do
			echo -e "\t'$i'"
		done
		echo ")"
		exit
	;;
	pull)
		if ! source ./manifest; then
			echo -e "${red}Failed to read manifest${normal}"
			exit 1
		fi
		for line in $(cat bpm.lock); do
			mkdir -p $HOME/.local/state/bpm/$bpm_name/"$(cut -d@ -f1 <<< $line | cut -d'/' -f1)"
			cd $HOME/.local/state/bpm/$bpm_name/"$(cut -d@ -f1 <<< $line | cut -d'/' -f1)"
			if [[ -d "$(cut -d@ -f1 <<< $line | cut -d'/' -f2)" ]]; then
				echo "Overwriting old directory"
				rm -rf "$(cut -d@ -f1 <<< $line | cut -d'/' -f2)"
			fi
			git clone --filter=blob:none -j 20 -q https://github.com/"$(cut -d@ -f1 <<< $line)" $(cut -d@ -f1 <<< $line | cut -d'/' -f2)
			cd "$(cut -d@ -f1 <<< $line | cut -d'/' -f2)"
			git checkout -q "$(cut -d@ -f2 <<< $line)"
			if test -f "bpm.sh"; then
				echo "Running post-clone script"
				./bpm.sh
			fi
		done
	;;
	run)
		shift
		if ! source ./manifest; then
			echo -e "${red}Failed to read manifest${normal}"
			exit 1
		fi
		bpm compile
		"$PWD"/build/binary/"$bpm_name" $@
		exit
	;;
	source)
		cd $HOME/.local/state/bpm/"$2"/
		source **/src/main.sh
		exit
	;;
	compile)
		if ! command -v bashc >/dev/null; then
			echo -e "${bold}bashc${normal} not found!"
		fi
		if ! source ./manifest; then
			echo -e "${red}Failed to read manifest${normal}"
			exit 1
		fi
		mkdir -p build/binary
		echo '#!/usr/bin/env bash' > build/"$bpm_name"
		for line in $(cat bpm.lock); do
			if [[ ${#dependencies[@]} -ne 0 ]]; then
				for i in "${dependencies[@]}"; do
					if [[ -d $HOME/.local/state/bpm/"$bpm_name"/$(cut -d@ -f1 <<< $line)/src/libs ]]; then
						cat $HOME/.local/state/bpm/"$bpm_name"/$(cut -d@ -f1 <<< $line)/src/libs/* >> build/"$bpm_name"
					fi
					cat $HOME/.local/state/bpm/"$bpm_name"/$(cut -d@ -f1 <<< $line)/src/main.sh >> build/"$bpm_name"
				done
			fi
		done
		if [[ -d src/libs ]]; then
			cat src/libs/* >> build/"$bpm_name"
		fi
		cat src/main.sh >> build/"$bpm_name"
		/usr/bin/bashc build/"$bpm_name" build/binary/"$bpm_name"
		echo "Binary located at ${bold}$PWD/build/binary/$bpm_name${normal}"
	;;
	new)
		mkdir -p "$2"
		cd "$2"
		mkdir -p src
		echo '# Replace contents. Do not include shebang' > src/main.sh
		chmod +x src/main.sh
		exit
	;;
	*)
		exit 1
	;;
esac
